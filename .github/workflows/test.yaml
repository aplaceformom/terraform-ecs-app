name: Testing

on: [pull_request]

env:
  TF_VERSION: 0.12.31
  TFSEC_VERSION: v0.39.42
  TFDOCS_VERSION: v0.14.1
  TFLINT_VERSION: 0.29.0
  AWS_ACCESS_KEY_ID: test
  AWS_SECRET_ACCESS_KEY: test
  AWS_DEFAULT_REGION: us-east-1
  LOCALSTACK_SERVICES: cloudwatch,cloudwatchevents,ec2,ecr,ecs,iam,sts

jobs:
  commit-lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-node@v1
      with:
        node-version: '14'
    - run: npm install
    - uses: wagoid/commitlint-github-action@v3
      env:
        NODE_PATH: ${{ github.workspace }}/node_modules

  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - id: env
      run: |
        echo "::set-output name=home::${HOME}"
        mkdir -p "${HOME}/.local/bin"
        printf 'provider "aws" { region = "${{ env.AWS_DEFAULT_REGION }}" }\n' > _aws_provider.tf

    - uses: actions/checkout@v2

    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - uses: actions/cache@v2
      id: tflint-cache
      with:
        path: ${{ steps.env.outputs.home }}/.local/bin/tflint
        key: tflint-${{ env.TFLINT_VERSION }}
    - name: Install TFLint
      if: steps.tflint-cache.outputs.cache-hit != 'true'
      run: |
        set -e
        echo "GH_HOME='${{ env.GITHUB_HOME }}'"
        echo "HOME='${HOME}'"
        echo "PATH='${PATH}'"
        curl -sSLo '/tmp/tflint-install.sh' 'https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh'
        sudo /bin/bash '/tmp/tflint-install.sh'
        cp '/usr/local/bin/tflint' '${{ steps.env.outputs.home }}/.local/bin/'

    - uses: actions/cache@v2
      id: tfdocs-cache
      with:
        path: ${{ steps.env.outputs.home }}/.local/bin/terraform-docs
        key: terraform-docs-${{ env.TFDOCS_VERSION }}
    - name: Install terraform-docs
      if: steps.tfdocs-cache.outputs.cache-hit != 'true'
      run: |
        set -e
        mkdir -p /tmp || :
        curl -sSLo '/tmp/terraform-docs.tar.gz' 'https://terraform-docs.io/dl/v0.14.1/terraform-docs-${{ env.TFDOCS_VERSION }}-Linux-amd64.tar.gz'
        sudo tar -C '${{ steps.env.outputs.home }}/.local/bin' -xavf '/tmp/terraform-docs.tar.gz' 'terraform-docs'

    - uses: actions/cache@v2
      id: tfsec-cache
      with:
        path: ${{ steps.env.outputs.home }}/.local/bin/tfsec
        key: tfsec-${{ env.TFSEC_VERSION }}
    - name: Install TFSec
      if: steps.tfsec-cache.outputs.cache-hit != 'true'
      run: |
        set -e
        sudo curl -sSLo '${{ steps.env.outputs.home }}/.local/bin/tfsec' 'https://github.com/tfsec/tfsec/releases/download/${{ env.TFSEC_VERSION }}/tfsec-linux-amd64'
        sudo chmod 0755 '${{ steps.env.outputs.home }}/.local/bin/tfsec'

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Set Pre-commit Cache Key
      run: echo "PY=$(python --version --version | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ env.PY }}-${{ hashFiles('.pre-commit-config.yaml') }}
    - uses: pre-commit/action@v2.0.3

  terraform-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - run: printf 'provider "aws" { region = "${{ env.AWS_DEFAULT_REGION }}" }\n' > _aws_provider.tf

    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - uses: actions/cache@v2
      with:
        path: .terraform.d
        key: terraform-${{ env.TF_VERSION }}-${{ hashFiles('versions.tf') }}
    - id: init
      run: terraform init -no-color

    - id: format
      run: terraform fmt -check -no-color

    - id: validate
      run: terraform validate -no-color

  terraform-apply:
    needs: [commit-lint, pre-commit, terraform-check]
    runs-on: ubuntu-latest
    services:
      localstack:
        image: localstack/localstack
        ports:
          - 443:443
          - 4535:4535
          - 4566:4566
        env:
          LOCALSTACK_API_KEY: ${{ secrets.LOCALSTACK_API_KEY }}
          SERVICES: ${{ env.LOCALSTACK_SERVICES }}
          DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        volumes:
          - /tmp/localstack:/tmp/localstack

    steps:
    - name: Localstack Setup
      uses: apfm-actions/localstack-action@v1
      id: localstack
      with:
        services: ${{ env.LOCALSTACK_SERVICES }}
    - uses: actions/cache@v2
      id: localstack-license
      with:
        path: /tmp/localstack/.localstack
        key: localstack-license

    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - uses: actions/cache@v2
      with:
        path: .terraform.d
        key: terraform-${{ env.TF_VERSION }}-${{ hashFiles('versions.tf') }}

    - name: Configure Terraform for Localstack
      env:
        LOCALSTACK_ENDPOINT_URL: ${{ steps.localstack.outputs.endpoint_url }}
      run: |
        cat <<EOF>_localstack_provider.tf
        provider "aws" {
          region                      = "${AWS_DEFAULT_REGION}"
          access_key                  = "${AWS_ACCESS_KEY_ID}"
          secret_key                  = "${AWS_SECRET_ACCESS_KEY}"
          skip_credentials_validation = true
          skip_metadata_api_check     = true
          skip_requesting_account_id  = true

          endpoints {
        EOF
        for service in $(echo "${LOCALSTACK_SERVICES}" | tr ',' ' '); do
            printf '%25s = "%s"\n' "${service}" "${LOCALSTACK_ENDPOINT_URL}" >> _localstack_provider.tf
        done
        printf '  }\n}\n' >> _localstack_provider.tf
        terraform init

    - name: Terraform Apply
      id: apply
      timeout-minutes: 10
      env:
        TF_IN_AUTOMATION: true
        TF_LOG: WARN
        TF_LOG_CORE: INFO
        TF_LOG_PROVIDER: DEBUG
      run: |
        terraform apply -no-color -input=false -lock=false -auto-approve \
          -var "region=${AWS_DEFAULT_REGION}" \
          -var 'image=scratch' \
          -var 'name=localstack-test' \
          -var 'command=["echo", "hello world"]' \
          -var 'environment={ "environment":"test" }' \
          -var 'secrets={ "password":"abc123" }' \
          -var 'cluster={ id = "${{ steps.localstack.outputs.cluster_arn }}", name = "${{steps.localstack.outputs.cluster_name }}", security_group_ids = "${{ steps.localstack.outputs.security_group_ids }}", private_subnets = "${{ steps.localstack.outputs.private_subnets }}", public_subnets = "${{ steps.localstack.outputs.public_subnets }}" }' \
          -var 'port=80' \
          -var 'enable=true'

    - name: Terraform Apply (enable=false)
      id: destroy
      timeout-minutes: 5
      env:
        TF_IN_AUTOMATION: true
        TF_LOG: WARN
        TF_LOG_CORE: INFO
        TF_LOG_PROVIDER: DEBUG
      run: |
        terraform apply -no-color -input=false -lock=false -auto-approve \
          -var "region=${AWS_DEFAULT_REGION}" \
          -var 'image=scratch' \
          -var 'name=localstack-test' \
          -var 'command=["echo", "hello world"]' \
          -var 'environment={ environment = "test" }' \
          -var 'secrets={ password = "abc123" }' \
          -var 'cluster={ id = "${{ steps.localstack.outputs.cluster_arn }}", name = "${{steps.localstack.outputs.cluster_name }}", security_group_ids = "${{ steps.localstack.outputs.security_group_ids }}", private_subnets = "${{ steps.localstack.outputs.private_subnets }}", public_subnets = "${{ steps.localstack.outputs.public_subnets }}" }' \
          -var 'port=80' \
          -var 'enable=false'

    - name: Localstack Logs
      if: always()
      run: |
        docker logs "$( docker ps -q -a --no-trunc --format 'table {{.ID}} {{.Image}}' | awk '/localstack/{print$1}')"
